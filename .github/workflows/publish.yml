name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Запускать при пуше тегов, начинающихся с 'v'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Получаем полную историю для создания тега
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine toml
      
      - name: Get version from tag
        id: get_version
        run: |
          # Получаем версию из тега (убираем 'v' из начала)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Version from tag: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check versions match
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          
          # Получаем версию из pyproject.toml
          PYPROJECT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "Version in pyproject.toml: $PYPROJECT_VERSION"
          
          # Получаем версию из __init__.py
          INIT_VERSION=$(python -c "import re; content = open('gosms_ru_client/__init__.py', 'r').read(); match = re.search(r'__version__ = \"([^\"]*)\"', content); print(match.group(1))")
          echo "Version in __init__.py: $INIT_VERSION"
          
          # Проверяем совпадение версий
          if [ "$VERSION" != "$PYPROJECT_VERSION" ] || [ "$VERSION" != "$INIT_VERSION" ]; then
            echo "Error: Versions do not match!"
            echo "Tag version: $VERSION"
            echo "pyproject.toml: $PYPROJECT_VERSION"
            echo "__init__.py: $INIT_VERSION"
            exit 1
          fi
      
      - name: Check if version exists on PyPI
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          # Проверяем существование версии через PyPI API
          if curl -s "https://pypi.org/pypi/gosms-ru-client/${VERSION}/json" | grep -q "version"; then
            echo "Version ${VERSION} already exists on PyPI. Please use a different version."
            exit 1
          fi
      
      - name: Build package
        run: python -m build
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/* 